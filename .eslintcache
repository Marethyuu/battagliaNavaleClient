[{"C:\\Users\\Marco\\Desktop\\battaglia_navale\\src\\index.js":"1","C:\\Users\\Marco\\Desktop\\battaglia_navale\\src\\App.js":"2","C:\\Users\\Marco\\Desktop\\battaglia_navale\\src\\components\\Board.js":"3","C:\\Users\\Marco\\Desktop\\battaglia_navale\\src\\components\\Lobby.js":"4"},{"size":294,"mtime":1611243488517,"results":"5","hashOfConfig":"6"},{"size":0,"mtime":1611002673352,"results":"7","hashOfConfig":"6"},{"size":2164,"mtime":1611008512190,"results":"8","hashOfConfig":"6"},{"size":9385,"mtime":1611331381044,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1i39txb",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"13"},"C:\\Users\\Marco\\Desktop\\battaglia_navale\\src\\index.js",["22","23"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Board from './components/Board';\nimport Lobby from './components/Lobby';\nimport './components/Board.css';\n\nReactDOM.render(\n    <Lobby />,\n  document.getElementById('root')\n  \n);\n",["24","25"],"C:\\Users\\Marco\\Desktop\\battaglia_navale\\src\\App.js",[],"C:\\Users\\Marco\\Desktop\\battaglia_navale\\src\\components\\Board.js",["26"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction Cell(props) {\r\n    return (\r\n        <button \r\n        className=\"cell\" \r\n        onClick={props.onClick}\r\n        >\r\n          {props.value}\r\n        </button>\r\n      );\r\n  }\r\n\r\nclass Board extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cells: new Array(10).fill(null).map(() => new Array(10).fill(null))\r\n        }\r\n    }\r\n\r\n    handleClick(x,y){\r\n        const cells = this.state.cells.slice();\r\n        cells[x][y] = \"X\";\r\n        this.setState({cells : cells});\r\n    }\r\n\r\n    renderRow(row, rowindex){\r\n        return (\r\n            <div class=\"board-row\">  <div class=\"row-index\">{rowindex}</div>\r\n            {\r\n                row.map((cell, colindex) => {\r\n                return this.renderCell(rowindex,colindex);\r\n            })\r\n        } </div>\r\n        )\r\n    }\r\n\r\n    renderCell(x,y){\r\n        return ( \r\n            <Cell \r\n            value={this.state.cells[x][y]}\r\n            onClick={() => this.handleClick(x,y)}\r\n            />\r\n          );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"board\">\r\n                <div class=\"board-row\" id=\"column-index-row\">\r\n                    <div class=\"col-index\"></div>\r\n                    <div class=\"col-index\">A</div>\r\n                    <div class=\"col-index\">B</div>\r\n                    <div class=\"col-index\">C</div>\r\n                    <div class=\"col-index\">D</div>\r\n                    <div class=\"col-index\">E</div>\r\n                    <div class=\"col-index\">F</div>\r\n                    <div class=\"col-index\">G</div>\r\n                    <div class=\"col-index\">H</div>\r\n                    <div class=\"col-index\">I</div>\r\n                    <div class=\"col-index\">J</div>\r\n                </div>\r\n                <div class=\"board-row\">   \r\n                {\r\n                    this.state.cells.map((row, rowindex) => {\r\n                        return this.renderRow(row, rowindex);\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    }\r\n\r\n    export default Board","C:\\Users\\Marco\\Desktop\\battaglia_navale\\src\\components\\Lobby.js",["27","28","29","30","31","32"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Peer from 'peerjs';\r\n\r\nclass Lobby extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            peer: null,\r\n            challengeSent: null,\r\n            challengeReceived: null,\r\n            errorMsg: '',\r\n        }\r\n        this.handleLoginRequest = this.handleLoginRequest.bind(this);\r\n        this.handleChallenge = this.handleChallenge.bind(this);\r\n        this.handleChallengeResponse = this.handleChallengeResponse.bind(this);\r\n        this.sendChallengeResponse = this.sendChallengeResponse.bind(this);\r\n    }\r\n\r\n    handleLoginRequest(newPeer){\r\n        this.setState({peer: newPeer}, () => {\r\n            this.state.peer.on('connection', (conn) => this.handleChallengeReceived(conn));\r\n        });\r\n        \r\n    }\r\n\r\n    handleChallenge(opponentPeerId){ //Sends challenge request or cancels previously sent request\r\n        let conn = this.state.peer.connect(opponentPeerId);\r\n        if(conn && opponentPeerId!==null){\r\n            conn.on('open', () =>{\r\n                this.setState({challengeSent: conn, errorMsg:''});\r\n                this.state.challengeSent.on('data', (data) => this.handleChallengeResponse(data));\r\n                this.state.challengeSent.on('close', () => {this.state.challengeSent.close(); \r\n                                                            this.state.errorMsg==='' ? this.state.errorMsg='L\\'utente ha già ricevuto una sfida' : this.state.errorMsg=this.state.errorMsg;\r\n                                                            this.setState({challengeSent:null, errorMsg:'L\\'utente ha già ricevuto una sfida'});\r\n                                                        });\r\n            })\r\n        }\r\n        else{\r\n            if(this.state.challengeSent){\r\n                this.state.challengeSent.close();\r\n                this.setState({errorMsg:'Sfida annullata'});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChallengeReceived(conn){\r\n        conn.on('open', () =>{\r\n            if(!this.state.challengeReceived)\r\n                this.setState({challengeReceived: conn});\r\n            else\r\n                conn.close();\r\n                \r\n            conn.on('close', () => {conn.close(); this.setState({challengeReceived: null})});\r\n        })\r\n        \r\n    }\r\n\r\n    handleChallengeResponse(data){\r\n        if(data){\r\n            if(data==='accept'){\r\n                if(this.state.challengeReceived) //Local peer sent challenge, remote peer accepted\r\n                    alert('GAME START | '+ this.state.peer.id + ' vs. ' + this.state.challengeReceived.peer);\r\n                else                            //Remote peer sent challenge, local peer accepted\r\n                    alert('GAME START | '+ this.state.peer.id + ' vs. ' + this.state.challengeSent.peer);\r\n            }\r\n            else if(data==='deny'){\r\n                this.state.challengeSent.close();\r\n                this.setState({errorMsg:'L\\'utente ha rifiutato la sfida',challengeSent:null});\r\n            }\r\n        }\r\n    }\r\n\r\n    sendChallengeResponse(data){\r\n        let opponent = this.state.challengeReceived;\r\n        if(opponent){\r\n            opponent.send(data);\r\n            if(data==='accept'){\r\n                alert('GAME START | '+ this.state.peer.id + ' vs. ' + this.state.challengeReceived.peer);\r\n            }\r\n            else if(data==='deny'){\r\n                opponent.on('close', ()=> {opponent.close()});\r\n                this.setState({challengeReceived:null});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleConnectionClose(conn){\r\n\r\n    }\r\n\r\n    render(){\r\n        let formLogin=null;\r\n        let pageTitle=null;\r\n        let playerList=null;\r\n        let challengeRequest=null;\r\n        \r\n        if(!this.state.peer){\r\n            pageTitle = 'Log In';\r\n            formLogin = <LoginForm onClick={this.handleLoginRequest}/>\r\n        }\r\n        else{\r\n            pageTitle = 'Sei collegato come ' + this.state.peer.id;\r\n            playerList = <PlayerList peer={this.state.peer} onClick={this.handleChallenge} challengeSent={this.state.challengeSent}/>\r\n            challengeRequest = <ChallengeRequest challengeReceived={this.state.challengeReceived} onClick={this.sendChallengeResponse}/>\r\n        }\r\n        \r\n        return(\r\n            <div>\r\n                <h1>{pageTitle}</h1>\r\n                {formLogin}\r\n                <div id=\"requests\">\r\n                    {playerList}\r\n                    {challengeRequest}\r\n                    {this.state.errorMsg}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            username: null,\r\n            loginError: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLoginRequest = this.handleLoginRequest.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({username: event.target.value, loginError:''})\r\n\r\n    }\r\n\r\n    attemptLogin(username){\r\n        try {\r\n            const peer = new Peer(username,\r\n                {host:'peerjs-server-battaglia-navale.herokuapp.com', \r\n                secure:true,\r\n                port:443})\r\n\r\n            if(!peer.id) //If server rejects connection (invalid username e.g. starting with '.' or ',')\r\n                throw 'Username non valido';\r\n\r\n            this.props.onClick(peer);\r\n        } catch (error) {\r\n            this.setState({loginError:'Username non valido'});\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n    handleLoginRequest(){\r\n        const user = this.state.username.trim();\r\n\r\n        if(!user)\r\n            this.setState({loginError:'Inserisci un nome utente'})\r\n        else if(user==='')\r\n            this.setState({loginError:'Inserisci un nome utente'})\r\n        else if(user.length<4)\r\n            this.setState({loginError:'Il nome utente deve contenere almeno 4 caratteri'})\r\n        else{\r\n            this.setState({loginError:''});\r\n            this.attemptLogin(user);\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"loginForm\">\r\n                <input type=\"text\" value={this.username} onChange={this.handleChange}/>\r\n                <input type=\"button\" onClick={this.handleLoginRequest} value=\"Login\"/>\r\n                <br/>\r\n                <label className=\"lbl-error-login\">{this.state.loginError}</label>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nclass PlayerList extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            list:null,\r\n            challengeError:'',\r\n        }\r\n        this.refreshList = this.refreshList.bind(this);\r\n        this.refreshList();\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.timerID = setInterval(() => this.refreshList(), 2000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    refreshList(){\r\n        let currentPeerIndex=null;\r\n        let currentPeerId=this.props.peer.id;\r\n\r\n        this.props.peer.listAllPeers((allPeers) => {\r\n            currentPeerIndex = allPeers.indexOf(currentPeerId);\r\n            if(currentPeerIndex!==-1){\r\n                allPeers.splice(currentPeerIndex,1);} //Remove current player from matchmaking request\r\n            this.setState({list:allPeers});\r\n        });\r\n    }\r\n\r\n    render(){\r\n        let players = [];\r\n        let listTemp = this.state.list;\r\n        let challengeButton;\r\n        let challengedPlayer = this.props.challengeSent ? this.props.challengeSent.peer : null;\r\n        if(listTemp){\r\n            this.state.list.forEach(element => {\r\n                challengeButton=null;\r\n                if(!challengedPlayer){\r\n                    challengeButton=<button onClick={() => this.props.onClick(element)} value={element}>Sfida</button>;\r\n                }\r\n                else if(challengedPlayer == element){\r\n                    challengeButton=<button onClick={() => this.props.onClick(null)} value={element}>Annulla</button>;\r\n                }\r\n                players.push(<li key={element} value={element}>{element} {challengeButton}</li>);\r\n            });\r\n        }\r\n\r\n        return(\r\n            <div className=\"players-request\">\r\n                <h3>Giocatori connessi:</h3>\r\n                <ul>\r\n                    {players.length>0 ? players : 'Nessun altro giocatore connesso'}\r\n                </ul>\r\n                {this.state.challengeError}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass ChallengeRequest extends React.Component {\r\n\r\n    render(){\r\n        let requestTemp = this.props.challengeReceived;\r\n        let title;\r\n        let content;\r\n        if(requestTemp){\r\n            title=<h3>Richieste di sfida:</h3>;\r\n            content=(<p value={requestTemp.peer}>{requestTemp.peer} ti ha sfidato!\r\n            <button onClick={() => this.props.onClick('accept')}>Accetta</button>\r\n            <button onClick={() => this.props.onClick('deny')}>Rifiuta</button>\r\n            </p>)\r\n        }\r\n        else{\r\n            content=<p>Nessuna sfida ricevuta</p>\r\n        }\r\n\r\n        return(\r\n            <div className=\"challenge-request-request\">\r\n                {title}\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Lobby",{"ruleId":"33","severity":1,"message":"34","line":4,"column":8,"nodeType":"35","messageId":"36","endLine":4,"endColumn":11},{"ruleId":"33","severity":1,"message":"37","line":5,"column":8,"nodeType":"35","messageId":"36","endLine":5,"endColumn":13},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"33","severity":1,"message":"42","line":2,"column":8,"nodeType":"35","messageId":"36","endLine":2,"endColumn":16},{"ruleId":"33","severity":1,"message":"42","line":2,"column":8,"nodeType":"35","messageId":"36","endLine":2,"endColumn":16},{"ruleId":"43","severity":1,"message":"44","line":34,"column":88,"nodeType":"45","endLine":34,"endColumn":98},{"ruleId":"43","severity":1,"message":"44","line":34,"column":148,"nodeType":"45","endLine":34,"endColumn":158},{"ruleId":"46","severity":1,"message":"47","line":34,"column":168,"nodeType":"45","messageId":"48","endLine":34,"endColumn":187},{"ruleId":"49","severity":1,"message":"50","line":146,"column":17,"nodeType":"51","messageId":"52","endLine":146,"endColumn":45},{"ruleId":"53","severity":1,"message":"54","line":226,"column":42,"nodeType":"55","messageId":"56","endLine":226,"endColumn":44},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Board' is defined but never used.","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"'ReactDOM' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-self-assign","'this.state.errorMsg' is assigned to itself.","selfAssignment","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]